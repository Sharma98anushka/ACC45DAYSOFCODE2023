#include<iostream>
using namespace std;
struct node{
    int data;
    struct node* next;
};

struct node* start = NULL;
void insert_begin(){
    struct node* newnode;
    newnode = new node;
    int item;
    cout<<"Enter the item: ";
    cin>>item;
    newnode -> data = item;
    if(start==NULL){
        newnode->next = NULL;
        start = newnode;

    }
    else{
        newnode->next= start;
        start=newnode;
    }
}
void insert_pos(){
struct node* newnode;
    newnode = new node;
    int item,position;
    cout<<"Enter the item and position: ";
    cin>>item>>position;
    newnode -> data = item;
   
    if(start==NULL){
        if(position==1){
            newnode->next = NULL;
        start = newnode;

        }
        else{
            cout<<"Invalid position ";
        }
    }
    else{
        struct node* crptr=start;
int len=0;
while(crptr != NULL){
    len++;
    crptr=crptr->next;
}
if(position>0 && position <= len){
    crptr = start;
    for(int i=0;i<position-2;i++){
        crptr= crptr->next;
    }
    newnode->next = crptr->next;
    crptr->next=newnode;
}
else{
    cout<<"Position is not valid";
}
    }
}

void  insert_end(){
struct node* newnode;
    newnode = new node;
    int item;
    cout<<"Enter the item: ";
    cin>>item;
    newnode -> data = item;
    if(start==NULL){
        newnode->next = NULL;
        start = newnode;

    }
    else{
        struct node* crptr=start;
        while(crptr->next!=NULL){
            crptr=crptr->next;
        }
crptr->next = newnode;
    }
}
void del_begin(){
 if(start==NULL){
    cout<<"List is empty , deletion is not possible ";
 }
 else{
    struct node*crptr=start;
    if(crptr->next==NULL){
        start=NULL;
        free(crptr);
    }
    else{
        start=crptr->next;
        free(crptr);
    }
 }
}
void del_pos(){
    int position;
    cout<<"Enter position to delete item: ";
    cin>>position;
   
    if(start==NULL){
        cout<<"\nList is not found";
    }
    else{
        struct node*crptr = start;
        int len=0;
        while(crptr!=NULL){
            len++;
            crptr= crptr->next;

        }
        if(position>0 && position<=len){
            crptr= start;
            struct node* frwrd,*bcrwrd;
            frwrd= start;
            for(int i=0;i<position-1;i++){
                bcrwrd=frwrd;
                frwrd  = frwrd->next;
            }
            bcrwrd->next=frwrd->next;
            free(frwrd);
        }
        else{
            cout<<"Position is not valid";
        }
    }
}
void del_end(){
if(start==NULL){
    cout<<"List is empty , deletion is not possible ";
}
 else{
    struct node *frwrd, *bcwrd;
      frwrd = start;
      if(frwrd->next !=NULL){
      while(frwrd->next!=NULL){
        bcwrd = frwrd;
        frwrd = frwrd->next;
      }
      bcwrd->next = NULL;
      free(frwrd);
      }
      else{
        start = NULL;
         free(frwrd);
      }
 }
}

void display(){
if (start == NULL){
    cout<<"List does not exist ";
}
else{
    struct node* crptr;
    crptr=start;
    while(crptr!=NULL){
        cout<<crptr->data;
        crptr=crptr->next;
    }
}
}
int main(){
    int choice;
    while(1){
    cout<<"\n1.Insert at the beginning: ";
    cout<<"\n2.Insert at the given position: ";
     cout<<"\n3.Insert at the end: ";
    cout<<"\n4.Deletion at the beginning: ";
    cout<<"\n5.Deletion at the specific position: ";
    cout<<"\n6.Deletion at the end: ";
    cout<<"\n7.Display:  ";
    cout<<"\n8.Exit: ";
    cout<<"\nEnter the choice: ";
    cin >> choice;
     switch(choice){
        case 1:
        insert_begin();
        break;
        case 2:
        insert_pos();
        break;
        case 3:
        insert_end();
        break;
        case 4:
        del_begin();
        break;
        case 5:
        del_pos();
        break;
        case 6:
        del_end();
        break;
        case 7:
        display();
        break;
        case 8:
        exit(0);
        default:
        cout<<"Enter the correct position: ";
    }
    }
    
    
    return 0;
}
